

# Consulte https://aka.ms/customizecontainer para aprender a personalizar su contenedor de depuración y cómo Visual Studio usa este Dockerfile para compilar sus imágenes para una depuración más rápida.

# Esta fase se usa cuando se ejecuta desde VS en modo rápido (valor predeterminado para la configuración de depuración)
FROM mcr.microsoft.com/dotnet/aspnet:8.0 AS base
USER $APP_UID
WORKDIR /app
EXPOSE 8080
EXPOSE 8081

# Esta fase se usa en producción o cuando se ejecuta desde VS en modo normal (valor predeterminado cuando no se usa la configuración de depuración)
FROM base AS final
WORKDIR /app

# Cambiar temporalmente a root para instalar dependencias y crear directorios
USER root

# Instalar dependencias de Linux necesarias para Telerik Reporting con SkiaSharp
RUN apt-get update \
    && apt-get install -y --allow-unauthenticated \
    libc6-dev \
    libfreetype6 \
    libfontconfig1 \
    && rm -rf /var/lib/apt/lists/*

# Crear directorios necesarios
RUN mkdir -p /app/reports /app/temp_downloads

# Copiar binarios precompilados localmente (compilados con dotnet publish)
COPY ./bin/Release/net8.0/publish .

# Copiar archivo de configuración de runtime para soporte Unix
COPY runtimeconfig.template.json /app/

# Copiar templates de reportes
COPY reports/ /app/reports/

# Establecer permisos para los directorios
RUN chmod -R 755 /app/reports /app/temp_downloads && \
    chown -R $APP_UID:$APP_UID /app/reports /app/temp_downloads

# Establecer variable de entorno para usar configuración de Docker
ENV ASPNETCORE_ENVIRONMENT=Docker

# Volver al usuario de aplicación
USER $APP_UID

ENTRYPOINT ["dotnet", "GenReports.dll"]
